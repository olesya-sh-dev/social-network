{"version":3,"file":"static/js/425.df5c5c29.chunk.js","mappings":"yKACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,KAAO,sBAAsB,SAAW,0BAA0B,YAAc,6BAA6B,WAAa,6B,6BCS7MA,EAAa,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,GAAIC,EAA+B,EAA/BA,IACrC,OACE,UAAC,KAAD,CACEC,GAAE,mBAAcF,GAChBG,UAAW,qBAAGC,SAA2BC,EAAAA,OAAWA,EAAAA,MAFtD,WAIE,gBAAKC,IAAKL,IACTF,MCbMQ,EAAU,SAAC,GAAuC,IAArCP,EAAoC,EAApCA,GAAIQ,EAAgC,EAAhCA,QAC5B,OACE,eAAIL,UAAWE,EAAAA,YAAf,SACGG,GADgCR,I,iDCiCjCS,GAAcC,EAAAA,EAAAA,GAAiB,IAsB/BC,GAAyBC,EAAAA,EAAAA,GAA0C,CACvEC,KAAM,wBADuBD,EAnB3B,SAACE,GACH,OACE,kBAAMC,SAAUD,EAAME,aAAtB,WACE,0BACE,SAACC,EAAA,EAAD,CACEC,YAAY,qBACZnB,KAAK,iBACLoB,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAUb,QAIzB,0BACE,SAACc,EAAA,EAAD,CAAQC,QAASV,EAAME,aAAvB,0B,+DC7CFS,EAA6B,SAACC,GAClC,MAAO,CACLC,OAAQD,EAAME,KAAKD,SCYvB,IAmBA,GAAeE,EAAAA,EAAAA,KD3BR,SAA8BC,GAUnC,OAFqCC,EAAAA,EAAAA,IAAQN,EAARM,EANX,SAACjB,GACzB,IAAKa,EAAwBb,EAAxBa,OAAWK,GAAhB,OAA6BlB,EAA7B,GACA,OAAKa,GACE,SAACG,GAAD,UAAeE,KADF,SAAC,KAAD,CAAU9B,GAAG,iBCyBnC6B,EAAAA,EAAAA,KArBsB,SAACL,GACvB,MAAO,CACLO,QAASP,EAAMQ,YAAYD,QAC3BE,SAAUT,EAAMQ,YAAYC,aAKL,SAACC,GAC1B,MAAO,CAILC,cAAe,SAACC,GACdF,GAASG,EAAAA,EAAAA,GAAwBD,SAKvC,EF9BuB,SAACxB,GACtB,IAAI0B,EAAkB1B,EAAMmB,QAAQQ,KAAI,SAACC,EAAIC,GAAL,OACtC,SAAC7C,EAAD,CAAwBC,KAAM2C,EAAG3C,KAAMC,GAAI0C,EAAG1C,GAAIC,IAAKyC,EAAGzC,KAAzC0C,MAEfC,EAAmB9B,EAAMqB,SAASM,KAAI,SAACC,EAAIC,GAAL,OACxC,SAACpC,EAAD,CAAqBC,QAASkC,EAAGlC,QAASR,GAAI0C,EAAG1C,IAAnC2C,MAQhB,OACE,iBAAKxC,UAAWE,EAAAA,QAAhB,WACE,gBAAKF,UAAWE,EAAAA,aAAhB,SAAiCmC,KACjC,iBAAKrC,UAAWE,EAAAA,SAAhB,UACGuC,GAGD,SAACjC,EAAD,CAAwBI,SAZb,SAAC8B,GAChB/B,EAAMuB,cAAcQ,EAAOP","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem.tsx","components/Dialogs/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__B4aSF\",\"dialogsItems\":\"Dialogs_dialogsItems__iU5uZ\",\"item\":\"Dialogs_item__AhjPW\",\"messages\":\"Dialogs_messages__z4wTC\",\"messageItem\":\"Dialogs_messageItem__vp9r-\",\"newMessage\":\"Dialogs_newMessage__m0h2E\"};","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n\r\nexport type DialogItemPropsType = {\r\n  name: string;\r\n  id: string;\r\n  img: string;\r\n};\r\nexport const DialogItem = ({ name, id, img }: DialogItemPropsType) => {\r\n  return (\r\n    <NavLink\r\n      to={`/dialogs/${id}`}\r\n      className={({ isActive }) => (isActive ? s.active : s.item)}\r\n    >\r\n      <img src={img} />\r\n      {name}\r\n    </NavLink>\r\n  );\r\n};\r\n","\r\nimport { MessagePropsType } from \"../redux/dialogs-reducer\";\r\nimport s from \"./Dialogs.module.css\";\r\n\r\nexport const Message = ({ id, message }: MessagePropsType) => {\r\n  return (\r\n    <li className={s.messageItem} key={id}>\r\n      {message}\r\n    </li>\r\n  );\r\n};\r\n","import s from \"./Dialogs.module.css\";\r\nimport { DialogItem } from \"./DialogItem\";\r\nimport { Message } from \"./Message\";\r\nimport { DialogMapPropsType } from \"./DialogsContainer\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { Button, ButtonPropsType } from \"../Button\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport { maxLengthCreator, required } from \"../../utils/validators\";\r\n\r\ntype FormDataType = {\r\n  newMessageBody: string;\r\n};\r\n\r\nexport const Dialogs = (props: DialogMapPropsType) => {\r\n  let dialogsElements = props.dialogs.map((el, index) => (\r\n    <DialogItem key={index} name={el.name} id={el.id} img={el.img} />\r\n  ));\r\n  let messagesElements = props.messages.map((el, index) => (\r\n    <Message key={index} message={el.message} id={el.id} />\r\n  ));\r\n\r\n  let addMessage = (values: any) => {\r\n    props.addNewMessage(values.newMessageBody);\r\n  };\r\n\r\n  //if (!props.isAuth) return <Navigate to=\"/login\" />\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>\r\n        {messagesElements}\r\n        {/* <AddNewMessageContainer className=\"s.newMessage\" /> */}\r\n        {/* <AddNewMessage className={s.newMessage} addNewMessage={props.addNewMessage} updateNewMessageText={props.updateNewMessageText} newMessageBody={props.newMessageBody}/> */}\r\n        <AddNewMessageFormRedux onSubmit={addMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\nconst AddNewMessageForm: React.FC<\r\n  InjectedFormProps<FormDataType & ButtonPropsType>\r\n> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          placeholder=\"Enter your message\"\r\n          name=\"newMessageBody\"\r\n          component={Textarea}\r\n          validate={[required, maxLength50]}\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <Button onClick={props.handleSubmit}>Send</Button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddNewMessageFormRedux = reduxForm<FormDataType & ButtonPropsType>({\r\n  form: \"dialogAddMessageForm\",\r\n})(AddNewMessageForm);\r\n","import React, { ComponentType} from \"react\";\r\nimport { Navigate} from \"react-router-dom\";\r\nimport { AppStateType } from \"../components/redux/redux-store\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean\r\n\r\n}\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth\r\n\r\n  }\r\n}\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n\r\n  const RedirectComponent = (props: MapStatePropsType)=> {\r\n    let {isAuth, ...restProps} = props\r\n    if (!isAuth) return <Navigate to=\"/login\" />\r\n    return <Component {...restProps  as T & {}}/>\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent\r\n}\r\n    \r\n// type RedirectComponentProps = {\r\n//   isAuth: boolean;\r\n  \r\n// }\r\n//  let mapStateToPropsForRedirect = (state: AppStateType) => {\r\n//     return {\r\n//       isAuth: state.auth.isAuth\r\n//     }\r\n//   }\r\n    // class RedirectComponent extends React.Component<RedirectComponentProps> {\r\n    //     render() {\r\n    //         if (!this.props.isAuth) return <Navigate to=\"/login\" />\r\n    //         return <Component {...this.props} />\r\n    //     }\r\n    // }\r\n\r\n    // let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    // return ConnectedAuthRedirectComponent\r\n//}\r\n\r\n\r\n\r\n        ","import { connect } from \"react-redux\";\r\nimport { Dialogs } from \"./Dialogs\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\nimport {\r\n  MessagePropsType,\r\n  addMessageActionCreator,\r\n  //updateNewMessageTextActionCreator,\r\n} from \"../redux/dialogs-reducer\";\r\nimport { DialogItemPropsType } from \"./DialogItem\";\r\nimport { Dispatch, compose } from \"redux\";\r\n\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\n\r\ntype MapStatePropsType = {\r\n  dialogs: DialogItemPropsType[];\r\n  messages: MessagePropsType[];\r\n  //newMessageBody: string;\r\n  //isAuth: boolean\r\n};\r\ntype MapDispatchPropsType = {\r\n //updateNewMessageText: (text: string) => void;\r\n  addNewMessage: (newMessageBody: string) => void;\r\n};\r\nexport type DialogMapPropsType = MapStatePropsType & MapDispatchPropsType;\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n    //newMessageBody: state.dialogsPage.newMessageBody,\r\n    //isAuth: state.auth.isAuth\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n  return {\r\n    // updateNewMessageText: (text: string) => {\r\n    //   dispatch(updateNewMessageTextActionCreator(text));\r\n    // },\r\n    addNewMessage: (newMessageBody: string) => {\r\n      dispatch(addMessageActionCreator(newMessageBody));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  withAuthRedirect,\r\n  connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs);\r\n//let DialogsRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\n// let DialogsRedirectComponent = (props: DialogMapPropsType) => {\r\n//   if(!props.isAuth) return <Navigate to={'/login'}/>\r\n//   return <Dialogs {...props} />;\r\n// }; вынесено в отдельный компонент\r\n\r\n// export const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(DialogsRedirectComponent)\r\n"],"names":["DialogItem","name","id","img","to","className","isActive","s","src","Message","message","maxLength50","maxLengthCreator","AddNewMessageFormRedux","reduxForm","form","props","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","Button","onClick","mapStateToPropsForRedirect","state","isAuth","auth","compose","Component","connect","restProps","dialogs","dialogsPage","messages","dispatch","addNewMessage","newMessageBody","addMessageActionCreator","dialogsElements","map","el","index","messagesElements","values"],"sourceRoot":""}