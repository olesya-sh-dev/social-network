{"version":3,"file":"static/js/800.54f95f74.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/My posts/Post/Post.module.css?6083","components/Profile/My posts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Profile/My posts/MyPosts.tsx","components/Profile/My posts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Profile/Person/Person.module.css?387a","components/Profile/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__vzTeX\"};","import { PostPropsType } from \"../../../redux/profile-reducer\";\r\nimport s from \"./Post.module.css\";\r\n\r\nexport const Post = ({ id, message, likesCount }: PostPropsType) => {\r\n  return (\r\n    <div className={s.item} key={id}>\r\n      <img src=\"https://img.freepik.com/free-psd/3d-illustration-of-human-avatar-or-profile_23-2150671126.jpg?w=826&t=st=1710060640~exp=1710061240~hmac=fa56f439f19eeeda890180f1251e1ddf4a6dfbc9ce457fdae0df22339311cafe\" />\r\n      {message}\r\n      <div>\r\n        <span>like {likesCount}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"newPostForm\":\"Profile_newPostForm__UYwc+\"};","import { Post } from \"./Post/Post\";\r\nimport s from \"./../../Profile/Profile.module.css\";\r\nimport { MyPostsMapPropsType } from \"./MyPostsContainer\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { ButtonPropsType } from \"../../Button\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport React from \"react\";\r\n\r\n\r\ntype FormDataType = {\r\n  newPostText: string;\r\n};\r\n\r\nexport const MyPosts = React.memo((props: MyPostsMapPropsType) => {\r\n  \r\n  let postsElements = props.posts.map((p, index) => (\r\n    <Post key={index} id={p.id} message={p.message} likesCount={p.likesCount} />\r\n  ));\r\n  let onAddPost = (values: any) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      My post\r\n      <AddNewPostFormRedux onSubmit={onAddPost} />\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm: React.FC<\r\n  InjectedFormProps<FormDataType & ButtonPropsType>\r\n> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name=\"newPostText\"\r\n          placeholder=\"Enter your message\"\r\n          validate={[required, maxLength10]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType & ButtonPropsType>({\r\n  form: \"ProfileAddNewPostForm\",\r\n})(AddNewPostForm);\r\n","import { connect } from \"react-redux\";\r\n\r\nimport { MyPosts } from \"./MyPosts\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport {\r\n  PostPropsType,\r\n  addPostActionCreator,\r\n \r\n} from \"../../redux/profile-reducer\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport type MyPostsMapPropsType = MapStatePostsPropsType&MapDispatchPropsType\r\ntype MapStatePostsPropsType = {\r\n  posts: PostPropsType[];\r\n  //newPostText: string\r\n};\r\ntype MapDispatchPropsType = {\r\n  addPost: (newPostText: any) => void;\r\n  //updateNewPostText: (text: string) => void;\r\n};\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    //newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n  return {\r\n    addPost: (newPostText: any) => {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    },\r\n    // updateNewPostText: (text: string) => {\r\n    //   dispatch(updateNewPostTextActionCreator(text));\r\n    // },\r\n  };\r\n};\r\nexport const MyPostsContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MyPosts);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"info\":\"Person_info__Wfh9d\",\"description\":\"Person_description__bF67C\"};","import React, { ChangeEvent, useEffect, useState } from \"react\";\r\n\r\nexport const ProfileStatusWithHooks = (props: any) => {\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n useEffect(()=>{\r\n  setStatus(props.status)\r\n },[props.status])\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n    \r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status)\r\n  };\r\n   const onStatusChange = (e:ChangeEvent<HTMLInputElement>)=>{\r\n    setStatus(e.currentTarget.value)\r\n   }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n         {!editMode && \r\n          <div>\r\n            <span onDoubleClick={activateEditMode}>\r\n              {props.status || \"_______\"}\r\n            </span>\r\n          </div>\r\n}\r\n        {editMode && (\r\n      \r\n          <div>\r\n            <input\r\n              onBlur={deactivateEditMode}\r\n              autoFocus={true}\r\n              value={status}\r\n              onChange={onStatusChange}          \r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { Preloader } from \"../common/Preloader\";\r\nimport s from \"../Profile/Person/Person.module.css\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport { ProfileStatusWithHooks } from \"./ProfileStatusWithHooks\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n  profile: any;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n};\r\nexport const ProfileInfo = ({ profile, status, updateStatus }: ProfileInfoPropsType) => {\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <img src=\"https://plus.unsplash.com/premium_photo-1709493205281-cf7a93041a16?q=80&w=1913&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\" />\r\n      </div>\r\n      <div className={s.info}>\r\n        <img src={profile.photos.large} />\r\n        <div className={s.description}>\r\n          <span>{profile.fullName}</span>\r\n          <span>{profile.aboutMe}l</span>\r\n          <span>Ищу работу: {profile.lookingForAJobDescription}</span>\r\n          <ProfileStatusWithHooks\r\n            status={status}\r\n            updateStatus={updateStatus}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { MyPostsContainer } from \"./My posts/MyPostsContainer\";\r\n\r\nimport { UserProfileType } from \"./ProfileContainer\";\r\n\r\nimport { ProfileInfo } from \"./ProfileInfo\";\r\n\r\nexport type ProfilePropsType = {\r\n  profile: UserProfileType;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n};\r\nexport const Profile = (props: ProfilePropsType) => {\r\n  return (\r\n    <div>\r\n      {/* <img src=\"https://plus.unsplash.com/premium_photo-1709493205281-cf7a93041a16?q=80&w=1913&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\" />*/}\r\n\r\n      <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n","import { Profile } from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  useLocation,\r\n  useParams,\r\n  useNavigate,\r\n} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { getStatus, getUserProfileThunkCreator, updateStatus } from \"../redux/profile-reducer\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\nimport { compose } from \"redux\";\r\n\r\ntype RouterType = {\r\n  userId: string | undefined;\r\n  location: ReturnType<typeof useLocation>;\r\n  navigate: ReturnType<typeof useNavigate>;\r\n  params: ReturnType<typeof useParams>;\r\n};\r\n\r\ntype PropsType = {\r\n  getUserProfileThunkCreator: (userId: number) => void;\r\n  profile: UserProfileType;\r\n  router: RouterType;\r\n  isAuth: boolean;\r\n  getStatus: (userId: number) => void;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n\r\n};\r\n\r\nexport type ContactType = {\r\n  facebook: string;\r\n  website?: any;\r\n  vk: string;\r\n  twitter: string;\r\n  instagram: string;\r\n  youtube?: any;\r\n  github: string;\r\n  mainLink?: any;\r\n};\r\n\r\nexport type PhotoType = {\r\n  small: string;\r\n  large: string;\r\n};\r\n\r\nexport type UserProfileType = {\r\n  aboutMe: string;\r\n  contacts: ContactType;\r\n  lookingForAJob: boolean;\r\n  lookingForAJobDescription: string;\r\n  fullName: string;\r\n  userId: number;\r\n  photos: PhotoType;\r\n};\r\n\r\nexport function withRouter(Component: any) {\r\n  function ComponentWithRouterProp(props: any) {\r\n    let location = useLocation();\r\n    let navigate = useNavigate();\r\n    let params = useParams();\r\n    return <Component {...props} router={{ location, navigate, params }} />;\r\n  }\r\n\r\n  return ComponentWithRouterProp;\r\n}\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  \r\n  componentDidMount() {\r\n    //TODO redirect to login if not authorized\r\n// let userId = this.props.router.params\r\n//     if (!userId) {\r\n//       userId = this.props.authorizedUserId\r\n//       if (!userId) {\r\n//         //         this.props.history.push(\"/login\");\r\n//       }\r\n//     }\r\n\r\n    type UserIdType = string | undefined;\r\n    let userId: UserIdType = \"31073\";\r\n\r\n    if (\r\n      typeof this.props.router.params !== \"string\" &&\r\n      \"userId\" in this.props.router.params\r\n    ) {\r\n      userId = this.props.router.params.userId;\r\n      this.props.getUserProfileThunkCreator(Number(userId));\r\n    } else {\r\n      this.props.getUserProfileThunkCreator(Number(userId));\r\n    }\r\n   \r\n    this.props.getStatus(Number(userId))\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} />\r\n    ) \r\n  }\r\n}\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n// let AuthRedirectComponent = (props: PropsType) => {\r\n//   if(!props.isAuth) return <Navigate to={'/login'}/>\r\n//   return <ProfileContainer {...props} />;\r\n// };\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  \r\n  //isAuth: state.auth.isAuth\r\n});\r\n\r\n// let WithRouterProfileContainer = withRouter(AuthRedirectComponent);\r\n// export default connect(mapStateToProps, { getUserProfileThunkCreator })(\r\n//   WithRouterProfileContainer\r\n// )\r\n\r\n// export default compose (\r\n//   connect(mapStateToProps, { getUserProfileThunkCreator }),\r\n//   withRouter,\r\n//   withAuthRedirect\r\n// )\r\n//   (ProfileContainer)\r\n\r\nexport default compose<React.ComponentType>(\r\n  withRouter,\r\n  //withAuthRedirect,\r\n  connect(mapStateToProps, { getUserProfileThunkCreator, getStatus, updateStatus }),\r\n)(ProfileContainer);\r\n"],"names":["Post","id","message","likesCount","className","s","src","MyPosts","React","props","postsElements","posts","map","p","index","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateStatus","autoFocus","value","onChange","e","currentTarget","ProfileInfo","profile","photos","large","fullName","aboutMe","lookingForAJobDescription","Preloader","Profile","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","router","ProfileContainer","userId","this","getUserProfileThunkCreator","Number","getStatus","compose"],"sourceRoot":""}